// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LeapSDK
import AVFoundation
import CoreData
import DeveloperToolsSupport
import Foundation
import LeapCoreSDK
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc public protocol LeapCallback : ObjectiveC.NSObjectProtocol {
  @objc func eventNotification(eventInfo: Swift.Dictionary<Swift.String, Any>)
}
@objc public protocol LeapHierarchyCallback : ObjectiveC.NSObjectProtocol {
  @objc func sendInstructionToFlutter(message: Swift.String, completion: @escaping (_ hierarchy: Swift.String) -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Leap : ObjectiveC.NSObject {
  @objc public static let shared: LeapSDK.Leap
  @objc weak public var callback: (any LeapSDK.LeapCallback)? {
    @objc get
    @objc set
  }
  @objc weak public var hierarchyCallback: (any LeapSDK.LeapHierarchyCallback)?
  @objc public func setWrapperSdkProperties(_ platform: Swift.String, _ version: Swift.String)
  @discardableResult
  @objc public func withBuilder(_ apiKey: Swift.String) -> LeapSDK.Leap?
  @discardableResult
  @objc public func withSelfHostedBuilder() -> LeapSDK.Leap?
  @discardableResult
  @objc public func setBaseUrl(_ hostingBaseUrl: Swift.String) -> LeapSDK.Leap?
  @discardableResult
  @objc public func addProperty(_ key: Swift.String, stringValue: Swift.String) -> LeapSDK.Leap
  @discardableResult
  @objc public func addProperty(_ key: Swift.String, intValue: Swift.Int) -> LeapSDK.Leap
  @discardableResult
  @objc public func addProperty(_ key: Swift.String, dateValue: Foundation.Date) -> LeapSDK.Leap
  @objc public func start()
  @objc public func flush()
  @objc public func start(_ apiKey: Swift.String)
  @objc public func setUniqueUserId(_ uniqueId: Swift.String)
  @objc public func setAppLocale(_ localeCode: Swift.String)
  @objc public func startProject(_ projectId: Swift.String, resetProject: Swift.Bool = false)
  @objc public func embedProject(_ projectId: Swift.String)
  @objc public func offlineSync(_ projectIds: [Swift.String])
  @objc public func disable()
  @objc public func logout()
  @objc public func getNativeHierarchy(_ viewId: Swift.Int, completion: @escaping (_ hierarchyString: Swift.String?) -> Swift.Void)
  @objc public func receiveDataFromiOS()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class WfxLogEntry : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension LeapSDK.WfxLogEntry {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<LeapSDK.WfxLogEntry>
  @objc @NSManaged dynamic public var extras: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var message: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sdk: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var wfxLogSession: LeapSDK.WfxLogSession? {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers public class WfxLogSession : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension LeapSDK.WfxLogSession {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<LeapSDK.WfxLogSession>
  @objc @NSManaged dynamic public var appVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endedAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var extras: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sdkVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var wfxLogEntries: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension LeapSDK.WfxLogSession {
  @objc(insertObject:inWfxLogEntriesAtIndex:) @NSManaged dynamic public func insertIntoWfxLogEntries(_ value: LeapSDK.WfxLogEntry, at idx: Swift.Int)
  @objc(removeObjectFromWfxLogEntriesAtIndex:) @NSManaged dynamic public func removeFromWfxLogEntries(at idx: Swift.Int)
  @objc(insertWfxLogEntries:atIndexes:) @NSManaged dynamic public func insertIntoWfxLogEntries(_ values: [LeapSDK.WfxLogEntry], at indexes: Foundation.NSIndexSet)
  @objc(removeWfxLogEntriesAtIndexes:) @NSManaged dynamic public func removeFromWfxLogEntries(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInWfxLogEntriesAtIndex:withObject:) @NSManaged dynamic public func replaceWfxLogEntries(at idx: Swift.Int, with value: LeapSDK.WfxLogEntry)
  @objc(replaceWfxLogEntriesAtIndexes:withWfxLogEntries:) @NSManaged dynamic public func replaceWfxLogEntries(at indexes: Foundation.NSIndexSet, with values: [LeapSDK.WfxLogEntry])
  @objc(addWfxLogEntriesObject:) @NSManaged dynamic public func addToWfxLogEntries(_ value: LeapSDK.WfxLogEntry)
  @objc(removeWfxLogEntriesObject:) @NSManaged dynamic public func removeFromWfxLogEntries(_ value: LeapSDK.WfxLogEntry)
  @objc(addWfxLogEntries:) @NSManaged dynamic public func addToWfxLogEntries(_ values: Foundation.NSOrderedSet)
  @objc(removeWfxLogEntries:) @NSManaged dynamic public func removeFromWfxLogEntries(_ values: Foundation.NSOrderedSet)
}
