// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LeapSDK
import AVFoundation
import DeveloperToolsSupport
import Foundation
import LeapCoreSDK
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc public protocol LeapCallback : ObjectiveC.NSObjectProtocol {
  @objc func eventNotification(eventInfo: Swift.Dictionary<Swift.String, Any>)
}
@objc public protocol LeapExceptionCallBack : ObjectiveC.NSObjectProtocol {
  @objc func exceptionCallbackEvent(eventInfo: [Swift.String : Any], exceptionType: LeapSDK.LeapExceptionCallBackTypes)
}
@objc public protocol LeapHierarchyCallback : ObjectiveC.NSObjectProtocol {
  @objc func sendInstructionToFlutter(message: Swift.String, completion: @escaping (_ hierarchy: Swift.String) -> Swift.Void)
}
@objc public enum LeapExceptionCallBackTypes : Swift.Int {
  case MEMORY
  case CRASH
  case AUI
  case JS
  case PUBLIC_METHOD
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Leap : ObjectiveC.NSObject {
  @objc public static let shared: LeapSDK.Leap
  @objc weak public var callback: (any LeapSDK.LeapCallback)? {
    @objc get
    @objc set
  }
  @objc weak public var hierarchyCallback: (any LeapSDK.LeapHierarchyCallback)?
  @objc public func setWrapperSdkProperties(_ platform: Swift.String, _ version: Swift.String)
  @discardableResult
  @objc public func withBuilder(_ apiKey: Swift.String) -> LeapSDK.Leap?
  @discardableResult
  @objc public func withSelfHostedBuilder() -> LeapSDK.Leap?
  @discardableResult
  @objc public func setBaseUrl(_ hostingBaseUrl: Swift.String) -> LeapSDK.Leap?
  @discardableResult
  @objc public func addProperty(_ key: Swift.String, stringValue: Swift.String) -> LeapSDK.Leap
  @discardableResult
  @objc public func addProperty(_ key: Swift.String, intValue: Swift.Int) -> LeapSDK.Leap
  @discardableResult
  @objc public func addProperty(_ key: Swift.String, dateValue: Foundation.Date) -> LeapSDK.Leap
  @objc public func start()
  @objc public func flush()
  @objc public func start(_ apiKey: Swift.String)
  @objc public func setUniqueUserId(_ uniqueId: Swift.String)
  @objc public func setAppLocale(_ localeCode: Swift.String)
  @objc public func startProject(_ projectId: Swift.String, resetProject: Swift.Bool = false)
  @objc public func embedProject(_ projectId: Swift.String)
  @objc public func offlineSync(_ projectIds: [Swift.String])
  @objc public func disable()
  @objc public func logout()
  @objc public func registerExceptionCallback(_ exceptionDelegate: any LeapSDK.LeapExceptionCallBack, callbackLevels: Foundation.NSArray? = nil)
  public func registerExceptionCallback(_ exceptionDelegate: any LeapSDK.LeapExceptionCallBack, callbackLevels: [LeapSDK.LeapExceptionCallBackTypes]? = nil)
  @objc public func getNativeHierarchy(_ viewId: Swift.Int, completion: @escaping (_ hierarchyString: Swift.String?) -> Swift.Void)
  @objc public func receiveDataFromiOS()
  @objc deinit
}
extension LeapSDK.LeapExceptionCallBackTypes : Swift.Equatable {}
extension LeapSDK.LeapExceptionCallBackTypes : Swift.Hashable {}
extension LeapSDK.LeapExceptionCallBackTypes : Swift.RawRepresentable {}
